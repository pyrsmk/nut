{
  "name": "nut",
  "description": "The concise CSS selector engine",
  "version": "0.4.0",
  "author": {
    "name": "AurÃ©lien Delogu",
    "email": "pyrsmk@dreamysource.fr",
    "url": "http://dreamysource.fr"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pyrsmk/nut.git"
  },
  "main": "src/nut.js",
  "ender": "src/ender.js",
  "keywords": [
    "css",
    "selector",
    "engine",
    "ender"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/pyrsmk/nut/issues",
    "email": "dev@dreamysource.fr"
  },
  "homepage": "http://dreamysource.fr/product/nut",
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.9.2",
    "grunt-contrib-uglify": "~0.4.0"
  },
  "readme": "nut 0.4.0\r\n=========\r\n\r\nNut is a concise query selector engine that just allows you to do extremely simple queries.\r\n\r\nQuickly\r\n-------\r\n\r\nHey, the [names](https://github.com/pyrsmk/nut/tree/names) branch supports `name` attributes! Thanks to [Crydust](https://github.com/Crydust) ;)\r\n\r\nOh jeez, another engine?!\r\n-------------------------\r\n\r\nNut aims to be minimal to have a very tiny footprint and extreme velocity based on the observation that much of CSS requests could be kept as simple as possible since javascript is able to handle a lot of things. It is most of the time faster than `querySelectorAll` and then faster than all selector engines. Nut does not implement request caching, to avoid unecessary code additions and performance loss, because the user can easily keep a request and pass it as a context to another request.\r\n\r\nUse\r\n---\r\n\r\nHere's it can handle :\r\n\r\n```\r\n#foo\r\nsection\r\n.bar p\r\nsection #foo .bar p\r\ndiv, #foo, .bar\r\n```\r\n\r\nAnd here's it can't :\r\n\r\n```\r\ndiv *\r\ndiv#foo div.bar\r\ndiv > p\r\ndiv + p\r\n```\r\n\r\nSo, all pseudo-classes, attribute selectors and other advanced syntax are not allowed. But, let's dig in it :\r\n\r\n```javascript\r\n// Return an array\r\nnut('#foo');\r\n```\r\n\r\nOf course, queries can have a context :\r\n\r\n```javascript\r\n// Get nodes from the #foo context\r\nnut('.bar p',nut('#foo')[0]);\r\n```\r\n\r\nAnd that's all you need to know ;)\r\n\r\nEnder integration\r\n-----------------\r\n\r\nNut is compatible with [ender](http://ender.jit.su) and supports some useful syntax.\r\n\r\nSelecting nodes, as usually:\r\n\r\n```javascript\r\n$('#foo');\r\n$('.bar p',$('#foo')[0]);\r\n```\r\n\r\nSelecting existing nodes:\r\n\r\n```javascript\r\nvar nodes=$('.bar');\r\n$(nodes);\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nNut is published under the [MIT license](http://dreamysource.mit-license.org).\r\n",
  "readmeFilename": "README.markdown",
  "_id": "nut@0.4.0",
  "_from": "nut@"
}
