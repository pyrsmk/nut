{
  "name": "ender-core",
  "description": "core client library of Ender",
  "version": "2.0.0",
  "keywords": [
    "ender",
    "modules",
    "library",
    "framework",
    "packager"
  ],
  "main": "./ender.js",
  "ender": {
    "bare": true,
    "bridge": "./bridge.js"
  },
  "homepage": "http://enderjs.com",
  "authors": [
    "Dustin Diaz (http://dustindiaz.com)",
    "Jacob Thornton (https://github.com/fat)"
  ],
  "devDependencies": {
    "smoosh": "*",
    "sink-test": "*"
  },
  "scripts": {
    "make": "node make.js"
  },
  "readme": "#ENDER-CORE\n\nThis is the home of Ender's client code. It's what provides the glue for pulling together otherwise independent modules into a single cohesive library.\n\n## API\n\nTo create top level methods, like for example <code>$.myUtility(...)</code>, you can hook into Ender by calling the ender method:\n\n    !function ($) {\n      $.ender({\n        myUtility: myLibFn\n      });\n    }(ender);\n\n(*note - this is the default integration if no bridge is supplied*)\n\n### The Internal chain\n\nAnother common case for Plugin developers is to be able hook into the internal collection chain. To do this, simply call the same <code>ender</code> method but pass <code>true</code> as the second argument:\n\n    !function ($) {\n      $.ender(myExtensions, true);\n    }(ender);\n\nWithin this scope the internal prototype is exposed to the developer with an existing <code>elements</code> instance property representing the node collection. Have a look at how the [Bonzo DOM utility](https://github.com/ded/bonzo/blob/master/src/ender.js) does this. Also note that the internal chain can be augmented at any time (outside of this build) during your application. For example:\n\n    <script src=\"ender.js\"></script>\n    <script>\n    // an example of creating a utility that returns a random element from the matched set\n    !function ($) {\n\n      $.ender({\n        rand: function () {\n          return this[Math.floor(Math.random() * (this.length))];\n        }\n      }, true);\n\n    }(ender);\n    $('p').rand();\n    </script>\n\n### Selector Engine API\n\nEnder also exposes a unique privileged variable called `$._select`, which allows you to set the Ender selector engine. Setting the selector engine provides ender with the $ method, like this:\n\n``` js\n$('#foo .bar')\n```\n\nSetting the selector engine is done like so:\n\n``` js\n$._select = mySelectorEngine;\n```\n\nYou can see it in practice inside [Qwery's ender bridge](https://github.com/ded/qwery/blob/master/src/ender.js)\n\nIf you're building a Mobile Webkit or Android application, it may be a good idea to simply set it equal to QSA:\n\n``` js\n$._select = function (selector, root) {\n  return (root || document).querySelectorAll(selector);\n}\n```\n\n# License\nEnder (the wrapper) is licensed under **MIT**. For individual modules, see respective module licenses.\n",
  "readmeFilename": "README.md",
  "_id": "ender-core@2.0.0",
  "_from": "ender-core@"
}
